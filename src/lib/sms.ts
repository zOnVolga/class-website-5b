// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

export interface SMSResult {
  success: boolean;
  messageId?: string;
  error?: string;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-—à–ª—é–∑–æ–º
 * –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
 */
export async function sendVerificationSMS(phone: string, code: string): Promise<SMSResult> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ API
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–æ–¥–µ:
    // - SMS.ru
    // - Twilio
    // - SMS Aero
    // - –∏ —Ç.–¥.
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
    console.log(`üì± [SMS SIMULATION] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`);
    console.log(`üì± [SMS SIMULATION] –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);
    console.log(`üì± [SMS SIMULATION] API Key: ${process.env.SMS_API_KEY || 'demo-key'}`);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      success: true,
      messageId: `sim_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export function isValidPhoneForSMS(phone: string): boolean {
  // –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phoneRegex = /^(\+7|8)?\d{10}$/;
  return phoneRegex.test(phone.replace(/\D/g, ''));
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è SMS-—à–ª—é–∑–∞
 */
export function formatPhoneForSMS(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
  const digits = phone.replace(/\D/g, '');
  
  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
  if (digits.startsWith('8')) {
    return '+7' + digits.substring(1);
  } else if (digits.startsWith('7')) {
    return '+' + digits;
  } else if (digits.length === 10) {
    return '+7' + digits;
  }
  
  return phone;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ SMS (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö SMS-—à–ª—é–∑–æ–≤)
 */
export async function getSMSBalance(): Promise<number> {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API SMS-—à–ª—é–∑–∞
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
  return Math.floor(Math.random() * 1000);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É)
 */
export async function sendNotificationSMS(phone: string, message: string): Promise<SMSResult> {
  try {
    console.log(`üì± [SMS NOTIFICATION] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ ${phone}`);
    console.log(`üì± [SMS NOTIFICATION] –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return {
      success: true,
      messageId: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}